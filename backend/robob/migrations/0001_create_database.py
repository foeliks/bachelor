# Generated by Django 3.1.2 on 2020-10-20 12:34

from django.db import migrations


class Migration(migrations.Migration):

    operations = [
        migrations.RunSQL(
            """
			

            -- CREATE TABLES

            create table if not exists categories (
            	id serial,
            	title text not null,
            	primary key (id)
            );

			create table if not exists employee_ranks (
				id serial,
				title text not null,
				primary key (id)
			);

            create table if not exists knowledge (
            	id serial,
            	category_id integer references categories (id),
            	description text not null,
            	optional bool default false,
            	primary key (id)
            );

            create table if not exists tasks (
            	id serial,
            	category_id integer references categories (id),
            	knowledge_id integer references knowledge (id),
            	description text not null,
            	optional bool default false,
            	solution text,
				specify json,
				required_stars integer,
				required_employee_rank_id integer references employee_ranks (id),
				achieve_employee_rank_id integer references employee_ranks (id),
            	primary key (id)
            );

            create table if not exists progress (
            	user_id integer references auth_user (id) on delete cascade,
            	task_id integer references tasks (id) on delete cascade,
            	solved bool,
            	num_tries integer,
            	primary key (user_id, task_id, num_tries)
            );

			create table if not exists answers (
				user_id integer references auth_user (id) on delete cascade,
            	task_id integer references tasks (id) on delete cascade,
            	solved bool,
            	num_tries integer,
            	user_solution text,
            	primary key (user_id, task_id, num_tries)
			);

            create table if not exists diary (
            	user_id integer references auth_user (id)  on delete cascade,
            	knowledge_id integer references knowledge (id) on delete cascade,
            	primary key (knowledge_id, user_id)
            );



			-- UPDATE auth_user

			alter table auth_user add game_mode boolean default false;
			alter table auth_user add employee_rank_id integer references employee_ranks (id);


	        -- IMPORT DATA FROM CSV 

			do
	        $$
	        begin
	        	copy employee_ranks
	        	from '/tmp/employee_ranks.csv'
	        	delimiter ','
	        	csv header;

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/employee_ranks.csv was not found.';
	        end;
	        $$
	        language plpgsql;


	        do
	        $$
	        begin
	        	copy auth_user
	        	from '/tmp/auth_user.csv'
	        	delimiter ','
	        	csv header;	

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/auth_user.csv was not found.';
	        end;
	        $$
	        language plpgsql;

	        do
	        $$
	        begin
	        	copy categories
	        	from '/tmp/categories.csv'
	        	delimiter ','
	        	csv header;

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/categories.csv was not found.';
	        end;
	        $$
	        language plpgsql;

	        do
	        $$
	        begin
	        	copy knowledge
	        	from '/tmp/knowledge.csv'
	        	delimiter ','
	        	csv header;

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/knowledge.csv was not found.';
	        end;
	        $$
	        language plpgsql;

	        do
	        $$
	        begin
	        	copy tasks
	        	from '/tmp/tasks.csv'
	        	delimiter ','
	        	csv header;

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/tasks.csv was not found.';
	        end;
	        $$
	        language plpgsql;

	        do
	        $$
	        begin
	        	copy progress
	        	from '/tmp/progress.csv'
	        	delimiter ','
	        	csv header;

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/progress.csv was not found.';
	        end;
	        $$
	        language plpgsql;

			do
	        $$
	        begin
	        	copy answers
	        	from '/tmp/answers.csv'
	        	delimiter ','
	        	csv header;

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/answers.csv was not found.';
	        end;
	        $$
	        language plpgsql;

	        do
	        $$
	        begin
	        	copy diary
	        	from '/tmp/diary.csv'
	        	delimiter ','
	        	csv header;

	        	exception
	        		when undefined_file then
	        			raise notice '/tmp/diary.csv was not found.';
	        end;
	        $$
	        language plpgsql;


	        -- UPDATE SERIAL COUNTER
	        select setval('auth_user_id_seq', max(id)) from auth_user;
	        select setval('categories_id_seq', max(id)) from categories;
	        select setval('knowledge_id_seq', max(id)) from knowledge;
	        select setval('tasks_id_seq', max(id)) from tasks;
			select setval('employee_ranks_id_seq', max(id)) from employee_ranks;


	        -- CREATE TRIGGER FOR EXPORT DATA INTO CSV 

	        drop trigger if exists auth_user_trigger on auth_user;
	        drop trigger if exists categories_trigger on categories;
	        drop trigger if exists knowledge_trigger on knowledge;
	        drop trigger if exists tasks_trigger on tasks;
	        drop trigger if exists progress_trigger on progress; 
	        drop trigger if exists answers_trigger on answers; 
	        drop trigger if exists diary_trigger on diary;
	        drop trigger if exists employee_ranks_trigger on employee_ranks;

	        create or replace function auth_user_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy auth_user 
	        	to '/tmp/auth_user.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger auth_user_trigger
	        after insert or delete or update
	        on auth_user 
	        for each statement 
	        execute procedure auth_user_export();

	        create or replace function categories_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy categories
	        	to '/tmp/categories.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger categories_trigger
	        after insert or delete or update
	        on categories
	        for each statement 
	        execute procedure categories_export();

	        create or replace function knowledge_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy knowledge
	        	to '/tmp/knowledge.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger knowledge_trigger
	        after insert or delete or update
	        on knowledge
	        for each statement 
	        execute procedure knowledge_export();

	        create or replace function tasks_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy tasks
	        	to '/tmp/tasks.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger tasks_trigger
	        after insert or delete or update
	        on tasks
	        for each statement 
	        execute procedure tasks_export();

	        create or replace function progress_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy progress
	        	to '/tmp/progress.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger progress_trigger
	        after insert or delete or update
	        on progress
	        for each statement 
	        execute procedure progress_export();

			create or replace function answers_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy answers
	        	to '/tmp/answers.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger answers_trigger
	        after insert or delete or update
	        on answers
	        for each statement 
	        execute procedure answers_export();

	        create or replace function diary_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy diary
	        	to '/tmp/diary.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger diary_trigger
	        after insert or delete or update
	        on diary
	        for each statement 
	        execute procedure diary_export();

			create or replace function employee_ranks_export()
	        	returns trigger 
	        	language plpgsql
	        	as 
	        $$
	        begin
	        	copy employee_ranks
	        	to '/tmp/employee_ranks.csv'
	        	delimiter ','
	        	csv header;
	        	return null;
	        end;
	        $$;

	        create trigger employee_ranks_trigger
	        after insert or delete or update
	        on employee_ranks
	        for each statement 
	        execute procedure employee_ranks_export();
            """
        )
    ]
